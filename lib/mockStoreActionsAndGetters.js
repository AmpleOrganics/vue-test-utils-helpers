function mockStoreActionsAndGetters({
  modules: modulesDictionary,
  mockedGetters,
  jestFn
}) {
  const actionsDictionary = {};
  const gettersDictionary = {};
  Object.keys(modulesDictionary).forEach(moduleKey => {
    const moduleValue = modulesDictionary[moduleKey];
    const isNamespaced = Object.keys(moduleValue).includes('namespaced');
    mockStoreActions(moduleKey, moduleValue, actionsDictionary, isNamespaced, jestFn);
    mockStoreGetters(moduleKey, moduleValue, gettersDictionary, isNamespaced, jestFn, mockedGetters);

    if (moduleValue.modules) {
      const results = mockStoreActionsAndGetters({
        modules: moduleValue.modules,
        mockedGetters,
        jestFn
      });
      Object.keys(results.actions).forEach(actionKey => {
        actionsDictionary[`${moduleKey}/${actionKey}`] = results.actions[actionKey];
      });
      Object.keys(results.getters).forEach(getterKey => {
        gettersDictionary[`${moduleKey}/${getterKey}`] = results.getters[getterKey];
      });
    }
  });
  return {
    actions: actionsDictionary,
    getters: gettersDictionary
  };
}

function mockStoreActions(moduleKey, moduleValue, actionsDictionary, isNamespaced, jestFn) {
  if (moduleValue.actions) {
    Object.keys(moduleValue.actions).forEach(key => {
      const mockActionKey = isNamespaced ? `${moduleKey}/${key}` : key;
      const mockFn = jestFn().mockResolvedValue({});
      actionsDictionary[mockActionKey] = mockFn;
      moduleValue.actions[key] = mockFn;
    });
  }
}

function mockStoreGetters(moduleKey, moduleValue, gettersDictionary, isNamespaced, jestFn, mockedGetters) {
  if (moduleValue.getters) {
    Object.keys(moduleValue.getters).forEach(key => {
      const mockedGetterKey = isNamespaced ? `${moduleKey}/${key}` : key;
      let mockFn = jestFn(); // use custom mock functions when available

      if (Object.keys(mockedGetters).includes(mockedGetterKey)) {
        mockFn = mockedGetters[mockedGetterKey];
      }

      gettersDictionary[mockedGetterKey] = mockFn;
      moduleValue.getters[key] = mockFn;
    });
  }
}

export { mockStoreActionsAndGetters };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2NrU3RvcmVBY3Rpb25zQW5kR2V0dGVycy50cyJdLCJuYW1lcyI6WyJtb2NrU3RvcmVBY3Rpb25zQW5kR2V0dGVycyIsIm1vZHVsZXMiLCJtb2R1bGVzRGljdGlvbmFyeSIsIm1vY2tlZEdldHRlcnMiLCJqZXN0Rm4iLCJhY3Rpb25zRGljdGlvbmFyeSIsImdldHRlcnNEaWN0aW9uYXJ5IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJtb2R1bGVLZXkiLCJtb2R1bGVWYWx1ZSIsImlzTmFtZXNwYWNlZCIsImluY2x1ZGVzIiwibW9ja1N0b3JlQWN0aW9ucyIsIm1vY2tTdG9yZUdldHRlcnMiLCJyZXN1bHRzIiwiYWN0aW9ucyIsImFjdGlvbktleSIsImdldHRlcnMiLCJnZXR0ZXJLZXkiLCJrZXkiLCJtb2NrQWN0aW9uS2V5IiwibW9ja0ZuIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJtb2NrZWRHZXR0ZXJLZXkiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLDBCQUFULENBQXFDO0FBQ25DQyxFQUFBQSxPQUFPLEVBQUVDLGlCQUQwQjtBQUVuQ0MsRUFBQUEsYUFGbUM7QUFHbkNDLEVBQUFBO0FBSG1DLENBQXJDLEVBSUc7QUFDRCxRQUFNQyxpQkFBaUIsR0FBRyxFQUExQjtBQUNBLFFBQU1DLGlCQUFpQixHQUFHLEVBQTFCO0FBRUFDLEVBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTixpQkFBWixFQUErQk8sT0FBL0IsQ0FBdUNDLFNBQVMsSUFBSTtBQUNsRCxVQUFNQyxXQUFXLEdBQUdULGlCQUFpQixDQUFDUSxTQUFELENBQXJDO0FBQ0EsVUFBTUUsWUFBWSxHQUFHTCxNQUFNLENBQUNDLElBQVAsQ0FBWUcsV0FBWixFQUF5QkUsUUFBekIsQ0FBa0MsWUFBbEMsQ0FBckI7QUFFQUMsSUFBQUEsZ0JBQWdCLENBQUNKLFNBQUQsRUFBWUMsV0FBWixFQUF5Qk4saUJBQXpCLEVBQTRDTyxZQUE1QyxFQUEwRFIsTUFBMUQsQ0FBaEI7QUFDQVcs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U3ZCLDBCQUFUIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbW9ja1N0b3JlQWN0aW9uc0FuZEdldHRlcnMgKHtcbiAgbW9kdWxlczogbW9kdWxlc0RpY3Rpb25hcnksXG4gIG1vY2tlZEdldHRlcnMsXG4gIGplc3RGblxufSkge1xuICBjb25zdCBhY3Rpb25zRGljdGlvbmFyeSA9IHt9XG4gIGNvbnN0IGdldHRlcnNEaWN0aW9uYXJ5ID0ge31cblxuICBPYmplY3Qua2V5cyhtb2R1bGVzRGljdGlvbmFyeSkuZm9yRWFjaChtb2R1bGVLZXkgPT4ge1xuICAgIGNvbnN0IG1vZHVsZVZhbHVlID0gbW9kdWxlc0RpY3Rpb25hcnlbbW9kdWxlS2V5XVxuICAgIGNvbnN0IGlzTmFtZXNwYWNlZCA9IE9iamVjdC5rZXlzKG1vZHVsZVZhbHVlKS5pbmNsdWRlcygnbmFtZXNwYWNlZCcpXG5cbiAgICBtb2NrU3RvcmVBY3Rpb25zKG1vZHVsZUtleSwgbW9kdWxlVmFsdWUsIGFjdGlvbnNEaWN0aW9uYXJ5LCBpc05hbWVzcGFjZWQsIGplc3RGbilcbiAgICBtb2NrU3RvcmVHZXR0ZXJzKG1vZHVsZUtleSwgbW9kdWxlVmFsdWUsIGdldHRlcnNEaWN0aW9uYXJ5LCBpc05hbWVzcGFjZWQsIGplc3RGbiwgbW9ja2VkR2V0dGVycylcblxuICAgIGlmIChtb2R1bGVWYWx1ZS5tb2R1bGVzKSB7XG4gICAgICBjb25zdCByZXN1bHRzID0gbW9ja1N0b3JlQWN0aW9uc0FuZEdldHRlcnMoeyBtb2R1bGVzOiBtb2R1bGVWYWx1ZS5tb2R1bGVzLCBtb2NrZWRHZXR0ZXJzLCBqZXN0Rm4gfSlcbiAgICAgIE9iamVjdC5rZXlzKHJlc3VsdHMuYWN0aW9ucykuZm9yRWFjaChhY3Rpb25LZXkgPT4ge1xuICAgICAgICBhY3Rpb25zRGljdGlvbmFyeVtgJHttb2R1bGVLZXl9LyR7YWN0aW9uS2V5fWBdID0gcmVzdWx0cy5hY3Rpb25zW2FjdGlvbktleV1cbiAgICAgIH0pXG5cbiAgICAgIE9iamVjdC5rZXlzKHJlc3VsdHMuZ2V0dGVycykuZm9yRWFjaChnZXR0ZXJLZXkgPT4ge1xuICAgICAgICBnZXR0ZXJzRGljdGlvbmFyeVtgJHttb2R1bGVLZXl9LyR7Z2V0dGVyS2V5fWBdID0gcmVzdWx0cy5nZXR0ZXJzW2dldHRlcktleV1cbiAgICAgIH0pXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgYWN0aW9uczogYWN0aW9uc0RpY3Rpb25hcnksXG4gICAgZ2V0dGVyczogZ2V0dGVyc0RpY3Rpb25hcnlcbiAgfVxufVxuXG5mdW5jdGlvbiBtb2NrU3RvcmVBY3Rpb25zIChtb2R1bGVLZXksIG1vZHVsZVZhbHVlLCBhY3Rpb25zRGljdGlvbmFyeSwgaXNOYW1lc3BhY2VkLCBqZXN0Rm4pIHtcbiAgaWYgKG1vZHVsZVZhbHVlLmFjdGlvbnMpIHtcbiAgICBPYmplY3Qua2V5cyhtb2R1bGVWYWx1ZS5hY3Rpb25zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBtb2NrQWN0aW9uS2V5ID0gaXNOYW1lc3BhY2VkID8gYCR7bW9kdWxlS2V5fS8ke2tleX1gIDoga2V5XG4gICAgICBjb25zdCBtb2NrRm4gPSBqZXN0Rm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7fSlcbiAgICAgIGFjdGlvbnNEaWN0aW9uYXJ5W21vY2tBY3Rpb25LZXldID0gbW9ja0ZuXG4gICAgICBtb2R1bGVWYWx1ZS5hY3Rpb25zW2tleV0gPSBtb2NrRm5cbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIG1vY2tTdG9yZUdldHRlcnMgKG1vZHVsZUtleSwgbW9kdWxlVmFsdWUsIGdldHRlcnNEaWN0aW9uYXJ5LCBpc05hbWVzcGFjZWQsIGplc3RGbiwgbW9ja2VkR2V0dGVycykge1xuICBpZiAobW9kdWxlVmFsdWUuZ2V0dGVycykge1xuICAgIE9iamVjdC5rZXlzKG1vZHVsZVZhbHVlLmdldHRlcnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IG1vY2tlZEdldHRlcktleSA9IGlzTmFtZXNwYWNlZCA/IGAke21vZHVsZUtleX0vJHtrZXl9YCA6IGtleVxuICAgICAgbGV0IG1vY2tGbiA9IGplc3RGbigpXG4gICAgICAvLyB1c2UgY3VzdG9tIG1vY2sgZnVuY3Rpb25zIHdoZW4gYXZhaWxhYmxlXG4gICAgICBpZiAoT2JqZWN0LmtleXMobW9ja2VkR2V0dGVycykuaW5jbHVkZXMobW9ja2VkR2V0dGVyS2V5KSkge1xuICAgICAgICBtb2NrRm4gPSBtb2NrZWRHZXR0ZXJzW21vY2tlZEdldHRlcktleV1cbiAgICAgIH1cbiAgICAgIGdldHRlcnNEaWN0aW9uYXJ5W21vY2tlZEdldHRlcktleV0gPSBtb2NrRm5cbiAgICAgIG1vZHVsZVZhbHVlLmdldHRlcnNba2V5XSA9IG1vY2tGblxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IHsgbW9ja1N0b3JlQWN0aW9uc0FuZEdldHRlcnMgfVxuIl19