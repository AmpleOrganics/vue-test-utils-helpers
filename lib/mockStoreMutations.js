function mockStoreMutations({
  modules: modulesDictionary,
  jestFn
}) {
  const mutationsDictionary = {};
  Object.keys(modulesDictionary).forEach(moduleKey => {
    const moduleValue = modulesDictionary[moduleKey];
    const isNamespaced = Object.keys(moduleValue).includes('namespaced');

    if (moduleValue.mutations) {
      Object.keys(moduleValue.mutations).forEach(key => {
        const mockMutationKey = isNamespaced ? `${moduleKey}/${key}` : key;
        const mockFn = jestFn();
        mutationsDictionary[mockMutationKey] = mockFn;
        moduleValue.mutations[key] = mockFn;
      });
    }
  });
  return {
    mutations: mutationsDictionary
  };
}

export { mockStoreMutations };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2NrU3RvcmVNdXRhdGlvbnMudHMiXSwibmFtZXMiOlsibW9ja1N0b3JlTXV0YXRpb25zIiwibW9kdWxlcyIsIm1vZHVsZXNEaWN0aW9uYXJ5IiwiamVzdEZuIiwibXV0YXRpb25zRGljdGlvbmFyeSIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwibW9kdWxlS2V5IiwibW9kdWxlVmFsdWUiLCJpc05hbWVzcGFjZWQiLCJpbmNsdWRlcyIsIm11dGF0aW9ucyIsImtleSIsIm1vY2tNdXRhdGlvbktleSIsIm1vY2tGbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0Esa0JBQVQsQ0FBNkI7QUFDM0JDLEVBQUFBLE9BQU8sRUFBRUMsaUJBRGtCO0FBRTNCQyxFQUFBQTtBQUYyQixDQUE3QixFQUdHO0FBQ0QsUUFBTUMsbUJBQW1CLEdBQUcsRUFBNUI7QUFFQUMsRUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlKLGlCQUFaLEVBQStCSyxPQUEvQixDQUF1Q0MsU0FBUyxJQUFJO0FBQ2xELFVBQU1DLFdBQVcsR0FBR1AsaUJBQWlCLENBQUNNLFNBQUQsQ0FBckM7QUFDQSxVQUFNRSxZQUFZLEdBQUdMLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRyxXQUFaLEVBQXlCRSxRQUF6QixDQUFrQyxZQUFsQyxDQUFyQjs7QUFFQSxRQUFJRixXQUFXLENBQUNHLFNBQWhCLEVBQTJCO0FBQ3pCUCxNQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWUcsV0FBVyxDQUFDRyxTQUF4QixFQUFtQ0wsT0FBbkMsQ0FBMkNNLEdBQUcsSUFBSTtBQUNoRCxjQUFNQyxlQUFlLEdBQUdKLFlBQVksR0FBSSxHQUFFRixTQUFVLElBQUdLLEdBQUksRUFBdkIsR0FBMkJBLEdBQS9EO0FBQ0EsY0FBTUUsTUFBTSxHQUFHWixNQUFNLEVBQXJCO0FBQ0FDLFFBQUFBLG1CQUFtQixDQUFDVSxlQUFELENBQW5CLEdBQXVDQyxNQUF2QztBQUNBTixRQUFBQSxXQUFXLENBQUNHLFNBQVosQ0FBc0JDLEdBQXRCLElBQTZCRSxNQUE3QjtBQUNELE9BTEQ7QUFNRDtBQUNGLEdBWkQ7QUFjQSxTQUFPO0FBQ0xILElBQUFBLFNBQVMsRUFBRVI7QUFETixHQUFQO0FBR0Q7O0FBRUQsU0FBU0osa0JBQVQiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBtb2NrU3RvcmVNdXRhdGlvbnMgKHtcbiAgbW9kdWxlczogbW9kdWxlc0RpY3Rpb25hcnksXG4gIGplc3RGblxufSkge1xuICBjb25zdCBtdXRhdGlvbnNEaWN0aW9uYXJ5ID0ge31cblxuICBPYmplY3Qua2V5cyhtb2R1bGVzRGljdGlvbmFyeSkuZm9yRWFjaChtb2R1bGVLZXkgPT4ge1xuICAgIGNvbnN0IG1vZHVsZVZhbHVlID0gbW9kdWxlc0RpY3Rpb25hcnlbbW9kdWxlS2V5XVxuICAgIGNvbnN0IGlzTmFtZXNwYWNlZCA9IE9iamVjdC5rZXlzKG1vZHVsZVZhbHVlKS5pbmNsdWRlcygnbmFtZXNwYWNlZCcpXG5cbiAgICBpZiAobW9kdWxlVmFsdWUubXV0YXRpb25zKSB7XG4gICAgICBPYmplY3Qua2V5cyhtb2R1bGVWYWx1ZS5tdXRhdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29uc3QgbW9ja011dGF0aW9uS2V5ID0gaXNOYW1lc3BhY2VkID8gYCR7bW9kdWxlS2V5fS8ke2tleX1gIDoga2V5XG4gICAgICAgIGNvbnN0IG1vY2tGbiA9IGplc3RGbigpXG4gICAgICAgIG11dGF0aW9uc0RpY3Rpb25hcnlbbW9ja011dGF0aW9uS2V5XSA9IG1vY2tGblxuICAgICAgICBtb2R1bGVWYWx1ZS5tdXRhdGlvbnNba2V5XSA9IG1vY2tGblxuICAgICAgfSlcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIHtcbiAgICBtdXRhdGlvbnM6IG11dGF0aW9uc0RpY3Rpb25hcnlcbiAgfVxufVxuXG5leHBvcnQgeyBtb2NrU3RvcmVNdXRhdGlvbnMgfVxuIl19